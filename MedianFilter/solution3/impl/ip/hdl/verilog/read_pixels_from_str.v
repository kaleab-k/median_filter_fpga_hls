// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_pixels_from_str (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_stream_V_dout,
        out_stream_V_empty_n,
        out_stream_V_read,
        m_axi_out_array_AWVALID,
        m_axi_out_array_AWREADY,
        m_axi_out_array_AWADDR,
        m_axi_out_array_AWID,
        m_axi_out_array_AWLEN,
        m_axi_out_array_AWSIZE,
        m_axi_out_array_AWBURST,
        m_axi_out_array_AWLOCK,
        m_axi_out_array_AWCACHE,
        m_axi_out_array_AWPROT,
        m_axi_out_array_AWQOS,
        m_axi_out_array_AWREGION,
        m_axi_out_array_AWUSER,
        m_axi_out_array_WVALID,
        m_axi_out_array_WREADY,
        m_axi_out_array_WDATA,
        m_axi_out_array_WSTRB,
        m_axi_out_array_WLAST,
        m_axi_out_array_WID,
        m_axi_out_array_WUSER,
        m_axi_out_array_ARVALID,
        m_axi_out_array_ARREADY,
        m_axi_out_array_ARADDR,
        m_axi_out_array_ARID,
        m_axi_out_array_ARLEN,
        m_axi_out_array_ARSIZE,
        m_axi_out_array_ARBURST,
        m_axi_out_array_ARLOCK,
        m_axi_out_array_ARCACHE,
        m_axi_out_array_ARPROT,
        m_axi_out_array_ARQOS,
        m_axi_out_array_ARREGION,
        m_axi_out_array_ARUSER,
        m_axi_out_array_RVALID,
        m_axi_out_array_RREADY,
        m_axi_out_array_RDATA,
        m_axi_out_array_RLAST,
        m_axi_out_array_RID,
        m_axi_out_array_RUSER,
        m_axi_out_array_RRESP,
        m_axi_out_array_BVALID,
        m_axi_out_array_BREADY,
        m_axi_out_array_BRESP,
        m_axi_out_array_BID,
        m_axi_out_array_BUSER,
        out_array_offset_dout,
        out_array_offset_empty_n,
        out_array_offset_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_state6 = 8'd8;
parameter    ap_ST_fsm_state7 = 8'd16;
parameter    ap_ST_fsm_state8 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] out_stream_V_dout;
input   out_stream_V_empty_n;
output   out_stream_V_read;
output   m_axi_out_array_AWVALID;
input   m_axi_out_array_AWREADY;
output  [31:0] m_axi_out_array_AWADDR;
output  [0:0] m_axi_out_array_AWID;
output  [31:0] m_axi_out_array_AWLEN;
output  [2:0] m_axi_out_array_AWSIZE;
output  [1:0] m_axi_out_array_AWBURST;
output  [1:0] m_axi_out_array_AWLOCK;
output  [3:0] m_axi_out_array_AWCACHE;
output  [2:0] m_axi_out_array_AWPROT;
output  [3:0] m_axi_out_array_AWQOS;
output  [3:0] m_axi_out_array_AWREGION;
output  [0:0] m_axi_out_array_AWUSER;
output   m_axi_out_array_WVALID;
input   m_axi_out_array_WREADY;
output  [31:0] m_axi_out_array_WDATA;
output  [3:0] m_axi_out_array_WSTRB;
output   m_axi_out_array_WLAST;
output  [0:0] m_axi_out_array_WID;
output  [0:0] m_axi_out_array_WUSER;
output   m_axi_out_array_ARVALID;
input   m_axi_out_array_ARREADY;
output  [31:0] m_axi_out_array_ARADDR;
output  [0:0] m_axi_out_array_ARID;
output  [31:0] m_axi_out_array_ARLEN;
output  [2:0] m_axi_out_array_ARSIZE;
output  [1:0] m_axi_out_array_ARBURST;
output  [1:0] m_axi_out_array_ARLOCK;
output  [3:0] m_axi_out_array_ARCACHE;
output  [2:0] m_axi_out_array_ARPROT;
output  [3:0] m_axi_out_array_ARQOS;
output  [3:0] m_axi_out_array_ARREGION;
output  [0:0] m_axi_out_array_ARUSER;
input   m_axi_out_array_RVALID;
output   m_axi_out_array_RREADY;
input  [31:0] m_axi_out_array_RDATA;
input   m_axi_out_array_RLAST;
input  [0:0] m_axi_out_array_RID;
input  [0:0] m_axi_out_array_RUSER;
input  [1:0] m_axi_out_array_RRESP;
input   m_axi_out_array_BVALID;
output   m_axi_out_array_BREADY;
input  [1:0] m_axi_out_array_BRESP;
input  [0:0] m_axi_out_array_BID;
input  [0:0] m_axi_out_array_BUSER;
input  [31:0] out_array_offset_dout;
input   out_array_offset_empty_n;
output   out_array_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_stream_V_read;
reg m_axi_out_array_AWVALID;
reg m_axi_out_array_WVALID;
reg m_axi_out_array_BREADY;
reg out_array_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_174;
reg    out_array_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    out_array_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_reg_174;
reg    out_array_blk_n_B;
wire    ap_CS_fsm_state10;
reg    out_array_offset_blk_n;
reg   [18:0] i_i_reg_120;
reg   [29:0] out_array_offset1_i_reg_163;
reg    ap_block_state1;
reg    ap_sig_ioackin_m_axi_out_array_AWREADY;
wire   [0:0] exitcond_i_fu_151_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_out_array_WREADY;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [18:0] i_fu_157_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] tmp_reg_183;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire   [63:0] sext_i_fu_141_p1;
reg    ap_reg_ioackin_m_axi_out_array_AWREADY;
reg    ap_reg_ioackin_m_axi_out_array_WREADY;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_out_array_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_out_array_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_out_array_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_out_array_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_out_array_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_array_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_m_axi_out_array_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_out_array_AWREADY <= 1'b0;
            end else if ((m_axi_out_array_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_out_array_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_array_WREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp0_iter1_exitcond_i_reg_174 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_out_array_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_out_array_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_out_array_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_i_reg_120 <= i_fu_157_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_out_array_AWREADY == 1'b1))) begin
        i_i_reg_120 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_i_reg_174 <= exitcond_i_reg_174;
        exitcond_i_reg_174 <= exitcond_i_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_array_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_array_offset1_i_reg_163 <= {{out_array_offset_dout[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_174 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_183 <= out_stream_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_151_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_out_array_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_out_array_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_out_array_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_out_array_AWREADY = m_axi_out_array_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_array_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_out_array_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_out_array_WREADY = m_axi_out_array_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_array_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_out_array_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_out_array_AWVALID = 1'b1;
    end else begin
        m_axi_out_array_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_out_array_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_out_array_BREADY = 1'b1;
    end else begin
        m_axi_out_array_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_i_reg_174 == 1'd0) & (ap_reg_ioackin_m_axi_out_array_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_out_array_WVALID = 1'b1;
    end else begin
        m_axi_out_array_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_array_blk_n_AW = m_axi_out_array_AWREADY;
    end else begin
        out_array_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_array_blk_n_B = m_axi_out_array_BVALID;
    end else begin
        out_array_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_exitcond_i_reg_174 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_array_blk_n_W = m_axi_out_array_WREADY;
    end else begin
        out_array_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_array_offset_blk_n = out_array_offset_empty_n;
    end else begin
        out_array_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_array_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_array_offset_read = 1'b1;
    end else begin
        out_array_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_174 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        out_stream_V_blk_n = out_stream_V_empty_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_174 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_stream_V_read = 1'b1;
    end else begin
        out_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_array_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_out_array_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_151_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_151_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_out_array_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_i_reg_174 == 1'd0) & (out_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_i_reg_174 == 1'd0) & (out_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_i_reg_174 == 1'd0) & (out_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((out_array_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond_i_reg_174 == 1'd0) & (out_stream_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((ap_reg_pp0_iter1_exitcond_i_reg_174 == 1'd0) & (ap_sig_ioackin_m_axi_out_array_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_i_fu_151_p2 = ((i_i_reg_120 == 19'd357604) ? 1'b1 : 1'b0);

assign i_fu_157_p2 = (i_i_reg_120 + 19'd1);

assign m_axi_out_array_ARADDR = 32'd0;

assign m_axi_out_array_ARBURST = 2'd0;

assign m_axi_out_array_ARCACHE = 4'd0;

assign m_axi_out_array_ARID = 1'd0;

assign m_axi_out_array_ARLEN = 32'd0;

assign m_axi_out_array_ARLOCK = 2'd0;

assign m_axi_out_array_ARPROT = 3'd0;

assign m_axi_out_array_ARQOS = 4'd0;

assign m_axi_out_array_ARREGION = 4'd0;

assign m_axi_out_array_ARSIZE = 3'd0;

assign m_axi_out_array_ARUSER = 1'd0;

assign m_axi_out_array_ARVALID = 1'b0;

assign m_axi_out_array_AWADDR = sext_i_fu_141_p1;

assign m_axi_out_array_AWBURST = 2'd0;

assign m_axi_out_array_AWCACHE = 4'd0;

assign m_axi_out_array_AWID = 1'd0;

assign m_axi_out_array_AWLEN = 32'd357604;

assign m_axi_out_array_AWLOCK = 2'd0;

assign m_axi_out_array_AWPROT = 3'd0;

assign m_axi_out_array_AWQOS = 4'd0;

assign m_axi_out_array_AWREGION = 4'd0;

assign m_axi_out_array_AWSIZE = 3'd0;

assign m_axi_out_array_AWUSER = 1'd0;

assign m_axi_out_array_RREADY = 1'b0;

assign m_axi_out_array_WDATA = tmp_reg_183;

assign m_axi_out_array_WID = 1'd0;

assign m_axi_out_array_WLAST = 1'b0;

assign m_axi_out_array_WSTRB = 4'd15;

assign m_axi_out_array_WUSER = 1'd0;

assign sext_i_fu_141_p1 = out_array_offset1_i_reg_163;

endmodule //read_pixels_from_str
