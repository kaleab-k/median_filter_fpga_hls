// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_pixels_to_stre (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_stream_V_din,
        in_stream_V_full_n,
        in_stream_V_write,
        m_axi_in_array_AWVALID,
        m_axi_in_array_AWREADY,
        m_axi_in_array_AWADDR,
        m_axi_in_array_AWID,
        m_axi_in_array_AWLEN,
        m_axi_in_array_AWSIZE,
        m_axi_in_array_AWBURST,
        m_axi_in_array_AWLOCK,
        m_axi_in_array_AWCACHE,
        m_axi_in_array_AWPROT,
        m_axi_in_array_AWQOS,
        m_axi_in_array_AWREGION,
        m_axi_in_array_AWUSER,
        m_axi_in_array_WVALID,
        m_axi_in_array_WREADY,
        m_axi_in_array_WDATA,
        m_axi_in_array_WSTRB,
        m_axi_in_array_WLAST,
        m_axi_in_array_WID,
        m_axi_in_array_WUSER,
        m_axi_in_array_ARVALID,
        m_axi_in_array_ARREADY,
        m_axi_in_array_ARADDR,
        m_axi_in_array_ARID,
        m_axi_in_array_ARLEN,
        m_axi_in_array_ARSIZE,
        m_axi_in_array_ARBURST,
        m_axi_in_array_ARLOCK,
        m_axi_in_array_ARCACHE,
        m_axi_in_array_ARPROT,
        m_axi_in_array_ARQOS,
        m_axi_in_array_ARREGION,
        m_axi_in_array_ARUSER,
        m_axi_in_array_RVALID,
        m_axi_in_array_RREADY,
        m_axi_in_array_RDATA,
        m_axi_in_array_RLAST,
        m_axi_in_array_RID,
        m_axi_in_array_RUSER,
        m_axi_in_array_RRESP,
        m_axi_in_array_BVALID,
        m_axi_in_array_BREADY,
        m_axi_in_array_BRESP,
        m_axi_in_array_BID,
        m_axi_in_array_BUSER,
        in_array_offset,
        out_array,
        out_array_out_din,
        out_array_out_full_n,
        out_array_out_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [31:0] in_stream_V_din;
input   in_stream_V_full_n;
output   in_stream_V_write;
output   m_axi_in_array_AWVALID;
input   m_axi_in_array_AWREADY;
output  [31:0] m_axi_in_array_AWADDR;
output  [0:0] m_axi_in_array_AWID;
output  [31:0] m_axi_in_array_AWLEN;
output  [2:0] m_axi_in_array_AWSIZE;
output  [1:0] m_axi_in_array_AWBURST;
output  [1:0] m_axi_in_array_AWLOCK;
output  [3:0] m_axi_in_array_AWCACHE;
output  [2:0] m_axi_in_array_AWPROT;
output  [3:0] m_axi_in_array_AWQOS;
output  [3:0] m_axi_in_array_AWREGION;
output  [0:0] m_axi_in_array_AWUSER;
output   m_axi_in_array_WVALID;
input   m_axi_in_array_WREADY;
output  [31:0] m_axi_in_array_WDATA;
output  [3:0] m_axi_in_array_WSTRB;
output   m_axi_in_array_WLAST;
output  [0:0] m_axi_in_array_WID;
output  [0:0] m_axi_in_array_WUSER;
output   m_axi_in_array_ARVALID;
input   m_axi_in_array_ARREADY;
output  [31:0] m_axi_in_array_ARADDR;
output  [0:0] m_axi_in_array_ARID;
output  [31:0] m_axi_in_array_ARLEN;
output  [2:0] m_axi_in_array_ARSIZE;
output  [1:0] m_axi_in_array_ARBURST;
output  [1:0] m_axi_in_array_ARLOCK;
output  [3:0] m_axi_in_array_ARCACHE;
output  [2:0] m_axi_in_array_ARPROT;
output  [3:0] m_axi_in_array_ARQOS;
output  [3:0] m_axi_in_array_ARREGION;
output  [0:0] m_axi_in_array_ARUSER;
input   m_axi_in_array_RVALID;
output   m_axi_in_array_RREADY;
input  [31:0] m_axi_in_array_RDATA;
input   m_axi_in_array_RLAST;
input  [0:0] m_axi_in_array_RID;
input  [0:0] m_axi_in_array_RUSER;
input  [1:0] m_axi_in_array_RRESP;
input   m_axi_in_array_BVALID;
output   m_axi_in_array_BREADY;
input  [1:0] m_axi_in_array_BRESP;
input  [0:0] m_axi_in_array_BID;
input  [0:0] m_axi_in_array_BUSER;
input  [31:0] in_array_offset;
input  [31:0] out_array;
output  [31:0] out_array_out_din;
input   out_array_out_full_n;
output   out_array_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_stream_V_write;
reg m_axi_in_array_ARVALID;
reg m_axi_in_array_RREADY;
reg out_array_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_reg_183;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_reg_183;
reg    in_array_blk_n_AR;
reg    in_array_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    out_array_out_blk_n;
wire    ap_CS_fsm_state7;
reg   [18:0] i_i_i_reg_133;
reg    ap_block_state1;
reg    ap_sig_ioackin_m_axi_in_array_ARREADY;
wire   [0:0] exitcond_i_i_fu_165_p2;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [18:0] i_fu_171_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] temp_reg_192;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire   [63:0] sext_i_i_fu_154_p1;
reg    ap_reg_ioackin_m_axi_in_array_ARREADY;
reg    ap_block_pp0_stage0_01001;
wire   [29:0] in_array_offset1_i_i_fu_144_p4;
wire    ap_CS_fsm_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_298;
reg    ap_condition_153;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_in_array_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (out_array_out_full_n == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state7) & (out_array_out_full_n == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_in_array_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((1'b1 == ap_condition_153)) begin
                ap_reg_ioackin_m_axi_in_array_ARREADY <= 1'b0;
            end else if ((1'b1 == ap_condition_298)) begin
                ap_reg_ioackin_m_axi_in_array_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_fu_165_p2 == 1'd0))) begin
        i_i_i_reg_133 <= i_fu_171_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (out_array_out_full_n == 1'b1))) begin
        i_i_i_reg_133 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_i_i_reg_183 <= exitcond_i_i_reg_183;
        exitcond_i_i_reg_183 <= exitcond_i_i_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_183 == 1'd0))) begin
        temp_reg_192 <= m_axi_in_array_RDATA;
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_165_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_in_array_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_in_array_ARREADY = m_axi_in_array_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_in_array_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_array_blk_n_AR = m_axi_in_array_ARREADY;
    end else begin
        in_array_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_i_i_reg_183 == 1'd0))) begin
        in_array_blk_n_R = m_axi_in_array_RVALID;
    end else begin
        in_array_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_exitcond_i_i_reg_183 == 1'd0))) begin
        in_stream_V_blk_n = in_stream_V_full_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_exitcond_i_i_reg_183 == 1'd0))) begin
        in_stream_V_write = 1'b1;
    end else begin
        in_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_reg_ioackin_m_axi_in_array_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_in_array_ARVALID = 1'b1;
    end else begin
        m_axi_in_array_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_183 == 1'd0))) begin
        m_axi_in_array_RREADY = 1'b1;
    end else begin
        m_axi_in_array_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_array_out_blk_n = out_array_out_full_n;
    end else begin
        out_array_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (out_array_out_full_n == 1'b1))) begin
        out_array_out_write = 1'b1;
    end else begin
        out_array_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_sig_ioackin_m_axi_in_array_ARREADY == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (out_array_out_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_fu_165_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_fu_165_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((m_axi_in_array_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_i_i_reg_183 == 1'd0)) | ((in_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond_i_i_reg_183 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_in_array_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_i_i_reg_183 == 1'd0)) | ((in_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond_i_i_reg_183 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_in_array_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_i_i_reg_183 == 1'd0)) | ((in_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond_i_i_reg_183 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter2 = ((in_stream_V_full_n == 1'b0) & (ap_reg_pp0_iter1_exitcond_i_i_reg_183 == 1'd0));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((m_axi_in_array_RVALID == 1'b0) & (exitcond_i_i_reg_183 == 1'd0));
end

always @ (*) begin
    ap_condition_153 = ~((ap_sig_ioackin_m_axi_in_array_ARREADY == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_condition_298 = (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (m_axi_in_array_ARREADY == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_i_i_fu_165_p2 = ((i_i_i_reg_133 == 19'd360000) ? 1'b1 : 1'b0);

assign i_fu_171_p2 = (i_i_i_reg_133 + 19'd1);

assign in_array_offset1_i_i_fu_144_p4 = {{in_array_offset[31:2]}};

assign in_stream_V_din = temp_reg_192;

assign m_axi_in_array_ARADDR = sext_i_i_fu_154_p1;

assign m_axi_in_array_ARBURST = 2'd0;

assign m_axi_in_array_ARCACHE = 4'd0;

assign m_axi_in_array_ARID = 1'd0;

assign m_axi_in_array_ARLEN = 32'd360000;

assign m_axi_in_array_ARLOCK = 2'd0;

assign m_axi_in_array_ARPROT = 3'd0;

assign m_axi_in_array_ARQOS = 4'd0;

assign m_axi_in_array_ARREGION = 4'd0;

assign m_axi_in_array_ARSIZE = 3'd0;

assign m_axi_in_array_ARUSER = 1'd0;

assign m_axi_in_array_AWADDR = 32'd0;

assign m_axi_in_array_AWBURST = 2'd0;

assign m_axi_in_array_AWCACHE = 4'd0;

assign m_axi_in_array_AWID = 1'd0;

assign m_axi_in_array_AWLEN = 32'd0;

assign m_axi_in_array_AWLOCK = 2'd0;

assign m_axi_in_array_AWPROT = 3'd0;

assign m_axi_in_array_AWQOS = 4'd0;

assign m_axi_in_array_AWREGION = 4'd0;

assign m_axi_in_array_AWSIZE = 3'd0;

assign m_axi_in_array_AWUSER = 1'd0;

assign m_axi_in_array_AWVALID = 1'b0;

assign m_axi_in_array_BREADY = 1'b0;

assign m_axi_in_array_WDATA = 32'd0;

assign m_axi_in_array_WID = 1'd0;

assign m_axi_in_array_WLAST = 1'b0;

assign m_axi_in_array_WSTRB = 4'd0;

assign m_axi_in_array_WUSER = 1'd0;

assign m_axi_in_array_WVALID = 1'b0;

assign out_array_out_din = out_array;

assign sext_i_i_fu_154_p1 = in_array_offset1_i_i_fu_144_p4;

assign start_out = real_start;

endmodule //write_pixels_to_stre
