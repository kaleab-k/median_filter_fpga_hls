// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream_V_dout,
        in_stream_V_empty_n,
        in_stream_V_read,
        out_stream_V_din,
        out_stream_V_full_n,
        out_stream_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state16 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_V_dout;
input   in_stream_V_empty_n;
output   in_stream_V_read;
output  [31:0] out_stream_V_din;
input   out_stream_V_full_n;
output   out_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_read;
reg out_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_420;
reg    out_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter13;
reg   [0:0] or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter12_or_cond_reg_446;
reg   [18:0] indvar_flatten_reg_163;
reg   [9:0] i_reg_174;
reg   [9:0] j_reg_185;
wire   [0:0] exitcond_flatten_fu_210_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
reg    ap_block_state15_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_420;
wire   [18:0] indvar_flatten_next_fu_216_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] i_mid2_fu_282_p3;
reg   [9:0] temp_array_0_addr_reg_434;
reg   [9:0] temp_array_1_addr_reg_440;
wire   [0:0] or_cond_fu_312_p2;
reg   [0:0] ap_reg_pp0_iter1_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter2_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter3_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter4_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter5_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter6_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter7_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter8_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter9_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter10_or_cond_reg_446;
reg   [0:0] ap_reg_pp0_iter11_or_cond_reg_446;
wire   [9:0] j_1_fu_318_p2;
reg   [31:0] crop_0_0_load_reg_455;
reg   [31:0] crop_2_0_load_reg_460;
reg   [31:0] crop_1_0_load_reg_465;
reg   [31:0] crop_2_1_load_1_reg_470;
reg   [31:0] crop_0_1_load_1_reg_475;
reg   [31:0] crop_1_1_load_1_reg_480;
reg   [31:0] tmp_5_reg_485;
wire   [31:0] temp_array_0_q0;
reg   [31:0] crop_0_2_reg_490;
wire   [31:0] temp_array_1_q0;
reg   [31:0] crop_1_2_reg_495;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
wire   [9:0] temp_array_0_address0;
reg    temp_array_0_ce0;
reg    temp_array_0_ce1;
reg    temp_array_0_we1;
wire   [9:0] temp_array_1_address0;
reg    temp_array_1_ce0;
reg    temp_array_1_ce1;
reg    temp_array_1_we1;
wire   [31:0] grp_bubble_sort_fu_196_ap_return;
reg    grp_bubble_sort_fu_196_ap_ce;
wire   [63:0] tmp_8_fu_290_p1;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] crop_2_1_fu_88;
reg   [31:0] crop_0_0_fu_92;
reg   [31:0] crop_0_1_fu_96;
reg   [31:0] crop_2_0_fu_100;
reg   [31:0] crop_1_0_fu_104;
reg   [31:0] crop_1_1_fu_108;
wire   [0:0] exitcond_fu_222_p2;
wire   [9:0] i_s_fu_236_p2;
wire   [8:0] tmp_fu_242_p4;
wire   [8:0] tmp_1_fu_258_p4;
wire   [0:0] icmp_fu_252_p2;
wire   [0:0] icmp1_fu_268_p2;
wire   [9:0] j_mid2_fu_228_p3;
wire   [8:0] tmp_3_fu_296_p4;
wire   [0:0] tmp_mid2_fu_274_p3;
wire   [0:0] icmp2_fu_306_p2;
wire    ap_CS_fsm_state16;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
end

filter_temp_array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 600 ),
    .AddressWidth( 10 ))
temp_array_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_array_0_address0),
    .ce0(temp_array_0_ce0),
    .q0(temp_array_0_q0),
    .address1(temp_array_0_addr_reg_434),
    .ce1(temp_array_0_ce1),
    .we1(temp_array_0_we1),
    .d1(temp_array_1_q0)
);

filter_temp_array_0 #(
    .DataWidth( 32 ),
    .AddressRange( 600 ),
    .AddressWidth( 10 ))
temp_array_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_array_1_address0),
    .ce0(temp_array_1_ce0),
    .q0(temp_array_1_q0),
    .address1(temp_array_1_addr_reg_440),
    .ce1(temp_array_1_ce1),
    .we1(temp_array_1_we1),
    .d1(in_stream_V_dout)
);

bubble_sort grp_bubble_sort_fu_196(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .CROP_0_0_read(crop_0_0_load_reg_455),
    .CROP_0_1_read(crop_0_1_load_1_reg_475),
    .CROP_0_2_read(crop_0_2_reg_490),
    .CROP_1_0_read(crop_1_0_load_reg_465),
    .CROP_1_1_read(crop_1_1_load_1_reg_480),
    .CROP_1_2_read(crop_1_2_reg_495),
    .CROP_2_0_read(crop_2_0_load_reg_460),
    .CROP_2_1_read(crop_2_1_load_1_reg_470),
    .CROP_2_2_read(tmp_5_reg_485),
    .ap_return(grp_bubble_sort_fu_196_ap_return),
    .ap_ce(grp_bubble_sort_fu_196_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((exitcond_flatten_fu_210_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter13 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_174 <= i_mid2_fu_282_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_174 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_163 <= indvar_flatten_next_fu_216_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_163 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_185 <= j_1_fu_318_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_185 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_or_cond_reg_446 <= ap_reg_pp0_iter9_or_cond_reg_446;
        ap_reg_pp0_iter11_or_cond_reg_446 <= ap_reg_pp0_iter10_or_cond_reg_446;
        ap_reg_pp0_iter12_or_cond_reg_446 <= ap_reg_pp0_iter11_or_cond_reg_446;
        ap_reg_pp0_iter2_or_cond_reg_446 <= ap_reg_pp0_iter1_or_cond_reg_446;
        ap_reg_pp0_iter3_or_cond_reg_446 <= ap_reg_pp0_iter2_or_cond_reg_446;
        ap_reg_pp0_iter4_or_cond_reg_446 <= ap_reg_pp0_iter3_or_cond_reg_446;
        ap_reg_pp0_iter5_or_cond_reg_446 <= ap_reg_pp0_iter4_or_cond_reg_446;
        ap_reg_pp0_iter6_or_cond_reg_446 <= ap_reg_pp0_iter5_or_cond_reg_446;
        ap_reg_pp0_iter7_or_cond_reg_446 <= ap_reg_pp0_iter6_or_cond_reg_446;
        ap_reg_pp0_iter8_or_cond_reg_446 <= ap_reg_pp0_iter7_or_cond_reg_446;
        ap_reg_pp0_iter9_or_cond_reg_446 <= ap_reg_pp0_iter8_or_cond_reg_446;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_420 <= exitcond_flatten_reg_420;
        ap_reg_pp0_iter1_or_cond_reg_446 <= or_cond_reg_446;
        crop_0_0_load_reg_455 <= crop_0_0_fu_92;
        crop_1_0_load_reg_465 <= crop_1_0_fu_104;
        crop_2_0_load_reg_460 <= crop_2_0_fu_100;
        exitcond_flatten_reg_420 <= exitcond_flatten_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        crop_0_0_fu_92 <= crop_0_1_fu_96;
        crop_1_0_fu_104 <= crop_1_1_fu_108;
        crop_2_0_fu_100 <= crop_2_1_fu_88;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        crop_0_1_fu_96 <= temp_array_0_q0;
        crop_0_2_reg_490 <= temp_array_0_q0;
        crop_1_1_fu_108 <= temp_array_1_q0;
        crop_1_2_reg_495 <= temp_array_1_q0;
        crop_2_1_fu_88 <= in_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_420 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        crop_0_1_load_1_reg_475 <= crop_0_1_fu_96;
        crop_1_1_load_1_reg_480 <= crop_1_1_fu_108;
        crop_2_1_load_1_reg_470 <= crop_2_1_fu_88;
        tmp_5_reg_485 <= in_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond_reg_446 <= or_cond_fu_312_p2;
        temp_array_0_addr_reg_434 <= tmp_8_fu_290_p1;
        temp_array_1_addr_reg_440 <= tmp_8_fu_290_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_bubble_sort_fu_196_ap_ce = 1'b1;
    end else begin
        grp_bubble_sort_fu_196_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_420 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_V_blk_n = in_stream_V_empty_n;
    end else begin
        in_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_V_read = 1'b1;
    end else begin
        in_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter12_or_cond_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        out_stream_V_blk_n = out_stream_V_full_n;
    end else begin
        out_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter12_or_cond_reg_446 == 1'd1) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        out_stream_V_write = 1'b1;
    end else begin
        out_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        temp_array_0_ce0 = 1'b1;
    end else begin
        temp_array_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_array_0_ce1 = 1'b1;
    end else begin
        temp_array_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_array_0_we1 = 1'b1;
    end else begin
        temp_array_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        temp_array_1_ce0 = 1'b1;
    end else begin
        temp_array_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_array_1_ce1 = 1'b1;
    end else begin
        temp_array_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_420 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_array_1_we1 = 1'b1;
    end else begin
        temp_array_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter12 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter12 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter12_or_cond_reg_446 == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((exitcond_flatten_reg_420 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter12_or_cond_reg_446 == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((exitcond_flatten_reg_420 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter12_or_cond_reg_446 == 1'd1) & (out_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((exitcond_flatten_reg_420 == 1'd0) & (in_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage0_iter13 = ((ap_reg_pp0_iter12_or_cond_reg_446 == 1'd1) & (out_stream_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_420 == 1'd0) & (in_stream_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_210_p2 = ((indvar_flatten_reg_163 == 19'd360000) ? 1'b1 : 1'b0);

assign exitcond_fu_222_p2 = ((j_reg_185 == 10'd600) ? 1'b1 : 1'b0);

assign i_mid2_fu_282_p3 = ((exitcond_fu_222_p2[0:0] === 1'b1) ? i_s_fu_236_p2 : i_reg_174);

assign i_s_fu_236_p2 = (i_reg_174 + 10'd1);

assign icmp1_fu_268_p2 = ((tmp_1_fu_258_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp2_fu_306_p2 = ((tmp_3_fu_296_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_fu_252_p2 = ((tmp_fu_242_p4 != 9'd0) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_216_p2 = (indvar_flatten_reg_163 + 19'd1);

assign j_1_fu_318_p2 = (j_mid2_fu_228_p3 + 10'd1);

assign j_mid2_fu_228_p3 = ((exitcond_fu_222_p2[0:0] === 1'b1) ? 10'd0 : j_reg_185);

assign or_cond_fu_312_p2 = (tmp_mid2_fu_274_p3 & icmp2_fu_306_p2);

assign out_stream_V_din = grp_bubble_sort_fu_196_ap_return;

assign temp_array_0_address0 = tmp_8_fu_290_p1;

assign temp_array_1_address0 = tmp_8_fu_290_p1;

assign tmp_1_fu_258_p4 = {{i_reg_174[9:1]}};

assign tmp_3_fu_296_p4 = {{j_mid2_fu_228_p3[9:1]}};

assign tmp_8_fu_290_p1 = j_mid2_fu_228_p3;

assign tmp_fu_242_p4 = {{i_s_fu_236_p2[9:1]}};

assign tmp_mid2_fu_274_p3 = ((exitcond_fu_222_p2[0:0] === 1'b1) ? icmp_fu_252_p2 : icmp1_fu_268_p2);

endmodule //filter
