// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _filter_wrapper_HH_
#define _filter_wrapper_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "write_pixels_to_stre.h"
#include "filter.h"
#include "read_pixels_from_str.h"
#include "fifo_w32_d1024_A.h"
#include "fifo_w32_d2_A.h"
#include "start_for_filter_U0.h"
#include "filter_wrapper_AXILiteS_s_axi.h"
#include "filter_wrapper_gmem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_BUSER_WIDTH = 1>
struct filter_wrapper : public sc_module {
    // Port declarations 65
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_out< sc_logic > m_axi_gmem_AWVALID;
    sc_in< sc_logic > m_axi_gmem_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_AWID;
    sc_out< sc_lv<8> > m_axi_gmem_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_AWUSER_WIDTH> > m_axi_gmem_AWUSER;
    sc_out< sc_logic > m_axi_gmem_WVALID;
    sc_in< sc_logic > m_axi_gmem_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH/8> > m_axi_gmem_WSTRB;
    sc_out< sc_logic > m_axi_gmem_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_WID;
    sc_out< sc_uint<C_M_AXI_GMEM_WUSER_WIDTH> > m_axi_gmem_WUSER;
    sc_out< sc_logic > m_axi_gmem_ARVALID;
    sc_in< sc_logic > m_axi_gmem_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_ARID;
    sc_out< sc_lv<8> > m_axi_gmem_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_ARUSER_WIDTH> > m_axi_gmem_ARUSER;
    sc_in< sc_logic > m_axi_gmem_RVALID;
    sc_out< sc_logic > m_axi_gmem_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_RDATA;
    sc_in< sc_logic > m_axi_gmem_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_RID;
    sc_in< sc_uint<C_M_AXI_GMEM_RUSER_WIDTH> > m_axi_gmem_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem_RRESP;
    sc_in< sc_logic > m_axi_gmem_BVALID;
    sc_out< sc_logic > m_axi_gmem_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_BID;
    sc_in< sc_uint<C_M_AXI_GMEM_BUSER_WIDTH> > m_axi_gmem_BUSER;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<2> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<32> > ap_var_for_const4;


    // Module declarations
    filter_wrapper(sc_module_name name);
    SC_HAS_PROCESS(filter_wrapper);

    ~filter_wrapper();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    filter_wrapper_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* filter_wrapper_AXILiteS_s_axi_U;
    filter_wrapper_gmem_m_axi<32,32,5,2,2,256,256,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>* filter_wrapper_gmem_m_axi_U;
    write_pixels_to_stre* write_pixels_to_stre_U0;
    filter* filter_U0;
    read_pixels_from_str* read_pixels_from_str_U0;
    fifo_w32_d1024_A* in_stream_V_U;
    fifo_w32_d2_A* out_array_c_U;
    fifo_w32_d1024_A* out_stream_V_U;
    start_for_filter_U0* start_for_filter_U0_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > in_array;
    sc_signal< sc_lv<32> > out_array;
    sc_signal< sc_logic > gmem_AWREADY;
    sc_signal< sc_logic > gmem_WREADY;
    sc_signal< sc_logic > gmem_ARREADY;
    sc_signal< sc_logic > gmem_RVALID;
    sc_signal< sc_lv<32> > gmem_RDATA;
    sc_signal< sc_logic > gmem_RLAST;
    sc_signal< sc_lv<1> > gmem_RID;
    sc_signal< sc_lv<1> > gmem_RUSER;
    sc_signal< sc_lv<2> > gmem_RRESP;
    sc_signal< sc_logic > gmem_BVALID;
    sc_signal< sc_lv<2> > gmem_BRESP;
    sc_signal< sc_lv<1> > gmem_BID;
    sc_signal< sc_lv<1> > gmem_BUSER;
    sc_signal< sc_logic > write_pixels_to_stre_U0_ap_start;
    sc_signal< sc_logic > write_pixels_to_stre_U0_ap_done;
    sc_signal< sc_logic > write_pixels_to_stre_U0_ap_continue;
    sc_signal< sc_logic > write_pixels_to_stre_U0_ap_idle;
    sc_signal< sc_logic > write_pixels_to_stre_U0_ap_ready;
    sc_signal< sc_logic > write_pixels_to_stre_U0_start_out;
    sc_signal< sc_logic > write_pixels_to_stre_U0_start_write;
    sc_signal< sc_lv<32> > write_pixels_to_stre_U0_in_stream_V_din;
    sc_signal< sc_logic > write_pixels_to_stre_U0_in_stream_V_write;
    sc_signal< sc_logic > write_pixels_to_stre_U0_m_axi_in_array_AWVALID;
    sc_signal< sc_lv<32> > write_pixels_to_stre_U0_m_axi_in_array_AWADDR;
    sc_signal< sc_lv<1> > write_pixels_to_stre_U0_m_axi_in_array_AWID;
    sc_signal< sc_lv<32> > write_pixels_to_stre_U0_m_axi_in_array_AWLEN;
    sc_signal< sc_lv<3> > write_pixels_to_stre_U0_m_axi_in_array_AWSIZE;
    sc_signal< sc_lv<2> > write_pixels_to_stre_U0_m_axi_in_array_AWBURST;
    sc_signal< sc_lv<2> > write_pixels_to_stre_U0_m_axi_in_array_AWLOCK;
    sc_signal< sc_lv<4> > write_pixels_to_stre_U0_m_axi_in_array_AWCACHE;
    sc_signal< sc_lv<3> > write_pixels_to_stre_U0_m_axi_in_array_AWPROT;
    sc_signal< sc_lv<4> > write_pixels_to_stre_U0_m_axi_in_array_AWQOS;
    sc_signal< sc_lv<4> > write_pixels_to_stre_U0_m_axi_in_array_AWREGION;
    sc_signal< sc_lv<1> > write_pixels_to_stre_U0_m_axi_in_array_AWUSER;
    sc_signal< sc_logic > write_pixels_to_stre_U0_m_axi_in_array_WVALID;
    sc_signal< sc_lv<32> > write_pixels_to_stre_U0_m_axi_in_array_WDATA;
    sc_signal< sc_lv<4> > write_pixels_to_stre_U0_m_axi_in_array_WSTRB;
    sc_signal< sc_logic > write_pixels_to_stre_U0_m_axi_in_array_WLAST;
    sc_signal< sc_lv<1> > write_pixels_to_stre_U0_m_axi_in_array_WID;
    sc_signal< sc_lv<1> > write_pixels_to_stre_U0_m_axi_in_array_WUSER;
    sc_signal< sc_logic > write_pixels_to_stre_U0_m_axi_in_array_ARVALID;
    sc_signal< sc_lv<32> > write_pixels_to_stre_U0_m_axi_in_array_ARADDR;
    sc_signal< sc_lv<1> > write_pixels_to_stre_U0_m_axi_in_array_ARID;
    sc_signal< sc_lv<32> > write_pixels_to_stre_U0_m_axi_in_array_ARLEN;
    sc_signal< sc_lv<3> > write_pixels_to_stre_U0_m_axi_in_array_ARSIZE;
    sc_signal< sc_lv<2> > write_pixels_to_stre_U0_m_axi_in_array_ARBURST;
    sc_signal< sc_lv<2> > write_pixels_to_stre_U0_m_axi_in_array_ARLOCK;
    sc_signal< sc_lv<4> > write_pixels_to_stre_U0_m_axi_in_array_ARCACHE;
    sc_signal< sc_lv<3> > write_pixels_to_stre_U0_m_axi_in_array_ARPROT;
    sc_signal< sc_lv<4> > write_pixels_to_stre_U0_m_axi_in_array_ARQOS;
    sc_signal< sc_lv<4> > write_pixels_to_stre_U0_m_axi_in_array_ARREGION;
    sc_signal< sc_lv<1> > write_pixels_to_stre_U0_m_axi_in_array_ARUSER;
    sc_signal< sc_logic > write_pixels_to_stre_U0_m_axi_in_array_RREADY;
    sc_signal< sc_logic > write_pixels_to_stre_U0_m_axi_in_array_BREADY;
    sc_signal< sc_lv<32> > write_pixels_to_stre_U0_out_array_out_din;
    sc_signal< sc_logic > write_pixels_to_stre_U0_out_array_out_write;
    sc_signal< sc_logic > filter_U0_ap_start;
    sc_signal< sc_logic > filter_U0_ap_done;
    sc_signal< sc_logic > filter_U0_ap_continue;
    sc_signal< sc_logic > filter_U0_ap_idle;
    sc_signal< sc_logic > filter_U0_ap_ready;
    sc_signal< sc_logic > filter_U0_in_stream_V_read;
    sc_signal< sc_lv<32> > filter_U0_out_stream_V_din;
    sc_signal< sc_logic > filter_U0_out_stream_V_write;
    sc_signal< sc_logic > read_pixels_from_str_U0_ap_start;
    sc_signal< sc_logic > read_pixels_from_str_U0_ap_done;
    sc_signal< sc_logic > read_pixels_from_str_U0_ap_continue;
    sc_signal< sc_logic > read_pixels_from_str_U0_ap_idle;
    sc_signal< sc_logic > read_pixels_from_str_U0_ap_ready;
    sc_signal< sc_logic > read_pixels_from_str_U0_out_stream_V_read;
    sc_signal< sc_logic > read_pixels_from_str_U0_m_axi_out_array_AWVALID;
    sc_signal< sc_lv<32> > read_pixels_from_str_U0_m_axi_out_array_AWADDR;
    sc_signal< sc_lv<1> > read_pixels_from_str_U0_m_axi_out_array_AWID;
    sc_signal< sc_lv<32> > read_pixels_from_str_U0_m_axi_out_array_AWLEN;
    sc_signal< sc_lv<3> > read_pixels_from_str_U0_m_axi_out_array_AWSIZE;
    sc_signal< sc_lv<2> > read_pixels_from_str_U0_m_axi_out_array_AWBURST;
    sc_signal< sc_lv<2> > read_pixels_from_str_U0_m_axi_out_array_AWLOCK;
    sc_signal< sc_lv<4> > read_pixels_from_str_U0_m_axi_out_array_AWCACHE;
    sc_signal< sc_lv<3> > read_pixels_from_str_U0_m_axi_out_array_AWPROT;
    sc_signal< sc_lv<4> > read_pixels_from_str_U0_m_axi_out_array_AWQOS;
    sc_signal< sc_lv<4> > read_pixels_from_str_U0_m_axi_out_array_AWREGION;
    sc_signal< sc_lv<1> > read_pixels_from_str_U0_m_axi_out_array_AWUSER;
    sc_signal< sc_logic > read_pixels_from_str_U0_m_axi_out_array_WVALID;
    sc_signal< sc_lv<32> > read_pixels_from_str_U0_m_axi_out_array_WDATA;
    sc_signal< sc_lv<4> > read_pixels_from_str_U0_m_axi_out_array_WSTRB;
    sc_signal< sc_logic > read_pixels_from_str_U0_m_axi_out_array_WLAST;
    sc_signal< sc_lv<1> > read_pixels_from_str_U0_m_axi_out_array_WID;
    sc_signal< sc_lv<1> > read_pixels_from_str_U0_m_axi_out_array_WUSER;
    sc_signal< sc_logic > read_pixels_from_str_U0_m_axi_out_array_ARVALID;
    sc_signal< sc_lv<32> > read_pixels_from_str_U0_m_axi_out_array_ARADDR;
    sc_signal< sc_lv<1> > read_pixels_from_str_U0_m_axi_out_array_ARID;
    sc_signal< sc_lv<32> > read_pixels_from_str_U0_m_axi_out_array_ARLEN;
    sc_signal< sc_lv<3> > read_pixels_from_str_U0_m_axi_out_array_ARSIZE;
    sc_signal< sc_lv<2> > read_pixels_from_str_U0_m_axi_out_array_ARBURST;
    sc_signal< sc_lv<2> > read_pixels_from_str_U0_m_axi_out_array_ARLOCK;
    sc_signal< sc_lv<4> > read_pixels_from_str_U0_m_axi_out_array_ARCACHE;
    sc_signal< sc_lv<3> > read_pixels_from_str_U0_m_axi_out_array_ARPROT;
    sc_signal< sc_lv<4> > read_pixels_from_str_U0_m_axi_out_array_ARQOS;
    sc_signal< sc_lv<4> > read_pixels_from_str_U0_m_axi_out_array_ARREGION;
    sc_signal< sc_lv<1> > read_pixels_from_str_U0_m_axi_out_array_ARUSER;
    sc_signal< sc_logic > read_pixels_from_str_U0_m_axi_out_array_RREADY;
    sc_signal< sc_logic > read_pixels_from_str_U0_m_axi_out_array_BREADY;
    sc_signal< sc_logic > read_pixels_from_str_U0_out_array_offset_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > in_stream_V_full_n;
    sc_signal< sc_lv<32> > in_stream_V_dout;
    sc_signal< sc_logic > in_stream_V_empty_n;
    sc_signal< sc_logic > out_array_c_full_n;
    sc_signal< sc_lv<32> > out_array_c_dout;
    sc_signal< sc_logic > out_array_c_empty_n;
    sc_signal< sc_logic > out_stream_V_full_n;
    sc_signal< sc_lv<32> > out_stream_V_dout;
    sc_signal< sc_logic > out_stream_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_filter_U0_din;
    sc_signal< sc_logic > start_for_filter_U0_full_n;
    sc_signal< sc_lv<1> > start_for_filter_U0_dout;
    sc_signal< sc_logic > start_for_filter_U0_empty_n;
    sc_signal< sc_logic > filter_U0_start_full_n;
    sc_signal< sc_logic > filter_U0_start_write;
    sc_signal< sc_logic > read_pixels_from_str_U0_start_full_n;
    sc_signal< sc_logic > read_pixels_from_str_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_GMEM_USER_VALUE;
    static const int C_M_AXI_GMEM_PROT_VALUE;
    static const int C_M_AXI_GMEM_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_filter_U0_ap_continue();
    void thread_filter_U0_ap_start();
    void thread_filter_U0_start_full_n();
    void thread_filter_U0_start_write();
    void thread_read_pixels_from_str_U0_ap_continue();
    void thread_read_pixels_from_str_U0_start_full_n();
    void thread_read_pixels_from_str_U0_start_write();
    void thread_start_for_filter_U0_din();
    void thread_write_pixels_to_stre_U0_ap_continue();
    void thread_write_pixels_to_stre_U0_ap_start();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
