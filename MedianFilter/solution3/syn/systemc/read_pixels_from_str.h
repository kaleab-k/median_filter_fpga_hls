// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _read_pixels_from_str_HH_
#define _read_pixels_from_str_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct read_pixels_from_str : public sc_module {
    // Port declarations 58
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > out_stream_V_dout;
    sc_in< sc_logic > out_stream_V_empty_n;
    sc_out< sc_logic > out_stream_V_read;
    sc_out< sc_logic > m_axi_out_array_AWVALID;
    sc_in< sc_logic > m_axi_out_array_AWREADY;
    sc_out< sc_lv<32> > m_axi_out_array_AWADDR;
    sc_out< sc_lv<1> > m_axi_out_array_AWID;
    sc_out< sc_lv<32> > m_axi_out_array_AWLEN;
    sc_out< sc_lv<3> > m_axi_out_array_AWSIZE;
    sc_out< sc_lv<2> > m_axi_out_array_AWBURST;
    sc_out< sc_lv<2> > m_axi_out_array_AWLOCK;
    sc_out< sc_lv<4> > m_axi_out_array_AWCACHE;
    sc_out< sc_lv<3> > m_axi_out_array_AWPROT;
    sc_out< sc_lv<4> > m_axi_out_array_AWQOS;
    sc_out< sc_lv<4> > m_axi_out_array_AWREGION;
    sc_out< sc_lv<1> > m_axi_out_array_AWUSER;
    sc_out< sc_logic > m_axi_out_array_WVALID;
    sc_in< sc_logic > m_axi_out_array_WREADY;
    sc_out< sc_lv<32> > m_axi_out_array_WDATA;
    sc_out< sc_lv<4> > m_axi_out_array_WSTRB;
    sc_out< sc_logic > m_axi_out_array_WLAST;
    sc_out< sc_lv<1> > m_axi_out_array_WID;
    sc_out< sc_lv<1> > m_axi_out_array_WUSER;
    sc_out< sc_logic > m_axi_out_array_ARVALID;
    sc_in< sc_logic > m_axi_out_array_ARREADY;
    sc_out< sc_lv<32> > m_axi_out_array_ARADDR;
    sc_out< sc_lv<1> > m_axi_out_array_ARID;
    sc_out< sc_lv<32> > m_axi_out_array_ARLEN;
    sc_out< sc_lv<3> > m_axi_out_array_ARSIZE;
    sc_out< sc_lv<2> > m_axi_out_array_ARBURST;
    sc_out< sc_lv<2> > m_axi_out_array_ARLOCK;
    sc_out< sc_lv<4> > m_axi_out_array_ARCACHE;
    sc_out< sc_lv<3> > m_axi_out_array_ARPROT;
    sc_out< sc_lv<4> > m_axi_out_array_ARQOS;
    sc_out< sc_lv<4> > m_axi_out_array_ARREGION;
    sc_out< sc_lv<1> > m_axi_out_array_ARUSER;
    sc_in< sc_logic > m_axi_out_array_RVALID;
    sc_out< sc_logic > m_axi_out_array_RREADY;
    sc_in< sc_lv<32> > m_axi_out_array_RDATA;
    sc_in< sc_logic > m_axi_out_array_RLAST;
    sc_in< sc_lv<1> > m_axi_out_array_RID;
    sc_in< sc_lv<1> > m_axi_out_array_RUSER;
    sc_in< sc_lv<2> > m_axi_out_array_RRESP;
    sc_in< sc_logic > m_axi_out_array_BVALID;
    sc_out< sc_logic > m_axi_out_array_BREADY;
    sc_in< sc_lv<2> > m_axi_out_array_BRESP;
    sc_in< sc_lv<1> > m_axi_out_array_BID;
    sc_in< sc_lv<1> > m_axi_out_array_BUSER;
    sc_in< sc_lv<32> > out_array_offset_dout;
    sc_in< sc_logic > out_array_offset_empty_n;
    sc_out< sc_logic > out_array_offset_read;


    // Module declarations
    read_pixels_from_str(sc_module_name name);
    SC_HAS_PROCESS(read_pixels_from_str);

    ~read_pixels_from_str();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > out_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_i_reg_174;
    sc_signal< sc_logic > out_array_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > out_array_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_i_reg_174;
    sc_signal< sc_logic > out_array_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > out_array_offset_blk_n;
    sc_signal< sc_lv<19> > i_i_reg_120;
    sc_signal< sc_lv<30> > out_array_offset1_i_reg_163;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_out_array_AWREADY;
    sc_signal< sc_lv<1> > exitcond_i_fu_151_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_out_array_WREADY;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<19> > i_fu_157_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_reg_183;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<64> > sext_i_fu_141_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_out_array_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_out_array_WREADY;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_pp0_stage0;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const sc_lv<8> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<32> ap_const_lv32_574E4;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<19> ap_const_lv19_574E4;
    static const sc_lv<19> ap_const_lv19_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_out_array_AWREADY();
    void thread_ap_sig_ioackin_m_axi_out_array_WREADY();
    void thread_exitcond_i_fu_151_p2();
    void thread_i_fu_157_p2();
    void thread_m_axi_out_array_ARADDR();
    void thread_m_axi_out_array_ARBURST();
    void thread_m_axi_out_array_ARCACHE();
    void thread_m_axi_out_array_ARID();
    void thread_m_axi_out_array_ARLEN();
    void thread_m_axi_out_array_ARLOCK();
    void thread_m_axi_out_array_ARPROT();
    void thread_m_axi_out_array_ARQOS();
    void thread_m_axi_out_array_ARREGION();
    void thread_m_axi_out_array_ARSIZE();
    void thread_m_axi_out_array_ARUSER();
    void thread_m_axi_out_array_ARVALID();
    void thread_m_axi_out_array_AWADDR();
    void thread_m_axi_out_array_AWBURST();
    void thread_m_axi_out_array_AWCACHE();
    void thread_m_axi_out_array_AWID();
    void thread_m_axi_out_array_AWLEN();
    void thread_m_axi_out_array_AWLOCK();
    void thread_m_axi_out_array_AWPROT();
    void thread_m_axi_out_array_AWQOS();
    void thread_m_axi_out_array_AWREGION();
    void thread_m_axi_out_array_AWSIZE();
    void thread_m_axi_out_array_AWUSER();
    void thread_m_axi_out_array_AWVALID();
    void thread_m_axi_out_array_BREADY();
    void thread_m_axi_out_array_RREADY();
    void thread_m_axi_out_array_WDATA();
    void thread_m_axi_out_array_WID();
    void thread_m_axi_out_array_WLAST();
    void thread_m_axi_out_array_WSTRB();
    void thread_m_axi_out_array_WUSER();
    void thread_m_axi_out_array_WVALID();
    void thread_out_array_blk_n_AW();
    void thread_out_array_blk_n_B();
    void thread_out_array_blk_n_W();
    void thread_out_array_offset_blk_n();
    void thread_out_array_offset_read();
    void thread_out_stream_V_blk_n();
    void thread_out_stream_V_read();
    void thread_sext_i_fu_141_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
